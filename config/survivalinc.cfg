# Configuration file

client {
    # The color multiplier of leaves during autumn and winter
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:autumnLeafColor <
        1.2
        0.6
        0.8
     >

    # True to enable ghosts opacity to pulse. Setting this to false may improve the FPS a little bit
    B:pulsatingGhosts=true

    ##########################################################################################################
    # hud
    #--------------------------------------------------------------------------------------------------------#
    # HUD customization and settings
    ##########################################################################################################

    hud {
        # The X coordinate of the top left corner of the thermometer icon relative to the computed origin point
        I:heatIconX=-4

        # The Y coordinate of the top left corner of the thermometer icon relative to the computed origin point
        I:heatIconY=-51

        # The number of individual icons in the hydration bar
        # Min: 1
        # Max: 2147483647
        I:hydrationBarCapacity=10

        # The fill direction of the hydration bar.
        # For example, setting this to RIGHT means that the bar fills from left to right.
        # Valid values:
        # LEFT
        # RIGHT
        # DOWN
        # UP
        S:hydrationBarDirection=LEFT

        # The element to render the hydration bar after.
        # This value is only relevant when hydration bar stacking is enabled, and indicates the element the hydration bar follows.
        # Valid values:
        # ALL
        # HELMET
        # PORTAL
        # CROSSHAIRS
        # BOSSHEALTH
        # BOSSINFO
        # ARMOR
        # HEALTH
        # FOOD
        # AIR
        # HOTBAR
        # EXPERIENCE
        # TEXT
        # HEALTHMOUNT
        # JUMPBAR
        # CHAT
        # PLAYER_LIST
        # DEBUG
        # POTION_ICONS
        # SUBTITLES
        # FPS_GRAPH
        # VIGNETTE
        S:hydrationBarRenderTrigger=FOOD

        # The spacing between the icons in the hydration bar in pixels
        # Positive values pull the icons apart, negative values cram the icons together
        I:hydrationBarSpacing=-1

        # The side where the hydration bar will be stacked in
        # Valid values:
        # LEFT
        # RIGHT
        S:hydrationBarStack=RIGHT

        # The X coordinate of the top left corner of the hydration bar relative to the computed origin point
        I:hydrationBarX=10

        # The Y coordinate of the top left corner of the hydration bar relative to the computed origin point
        I:hydrationBarY=-49

        # The X-axis origin of the HUD represented as a fraction from the current screen resolution
        # Min: 0.0
        # Max: 1.0
        D:originX=0.5

        # The X-axis origin of the HUD represented as a fraction from the current screen resolution
        # Min: 0.0
        # Max: 1.0
        D:originY=1.0

        # The number of individual icons in the sanity bar
        # Min: 1
        # Max: 2147483647
        I:sanityBarCapacity=10

        # The fill direction of the sanity bar.
        # For example, setting this to RIGHT means that the bar fills from left to right.
        # Valid values:
        # LEFT
        # RIGHT
        # DOWN
        # UP
        S:sanityBarDirection=RIGHT

        # The element to render the sanity bar after.
        # This value is only relevant when sanity bar stacking is enabled, and indicates the element the sanity bar follows.
        # Valid values:
        # ALL
        # HELMET
        # PORTAL
        # CROSSHAIRS
        # BOSSHEALTH
        # BOSSINFO
        # ARMOR
        # HEALTH
        # FOOD
        # AIR
        # HOTBAR
        # EXPERIENCE
        # TEXT
        # HEALTHMOUNT
        # JUMPBAR
        # CHAT
        # PLAYER_LIST
        # DEBUG
        # POTION_ICONS
        # SUBTITLES
        # FPS_GRAPH
        # VIGNETTE
        S:sanityBarRenderTrigger=HEALTH

        # The spacing between the icons in the sanity bar in pixels
        # Positive values pull the icons apart, negative values squash the icons together
        I:sanityBarSpacing=-1

        # The side where the sanity bar will be stacked in
        # Valid values:
        # LEFT
        # RIGHT
        S:sanityBarStack=LEFT

        # The X coordinate of the top left corner of the sanity bar relative to the computed origin point
        I:sanityBarX=-91

        # The Y coordinate of the top left corner of the sanity bar relative to the computed origin point
        I:sanityBarY=-49

        # Set to true to enable hydration bar stacking.
        # The stacking basically means that the bar is dynamically integrated into the vanilla HUD.
        # Setting this to false enables absolute positioning using hydrationBarX and hydrationBarY
        B:stackHydrationBar=true

        # Set to true to enable sanity bar stacking.
        # The stacking basically means that the bar is dynamically integrated into the vanilla HUD.
        # Setting this to false enables absolute positioning using sanityBarX and sanityBarY
        B:stackSanityBar=true
    }

    ##########################################################################################################
    # vignette
    #--------------------------------------------------------------------------------------------------------#
    # Vignette customization and settings
    ##########################################################################################################

    vignette {
        # The color (HTML notation) of vignette displayed when the player is freezing
        S:coldColor=#2eecf0

        # The color (HTML notation) of vignette displayed when the player is dehydrated
        S:dehydrationColor=#9e9e9e

        # Whether to use vignette-based stat value indicator
        B:enable=true

        # The color (HTML notation) of vignette displayed when the player is overheating
        S:hotColor=#f2541f

        # True to enable less linear scaling of heat vignette opacity. False to force linear behavior
        B:logarithmicOpacity=true

        # The maximum opacity the vignette can achieve.
        D:maxOpacity=0.5
    }

}


general {
    # The amount of ticks between automatic server-client stat data synchronizations
    # Min: 1
    # Max: 2147483647
    I:serverSyncDelay=600

    # Set this to true to verify water drink requests by doing independent server-side raytracing.
    # Setting this to false allows hacked clients to replenish their hydration idenfinitely
    # On the other hand, this may cause some issues with mods implementing draconic policies on raytracing, such as ValkyrienSkies
    # If you are unsure, leave this to true. If you're experiencing crashes, try turning this off
    B:verifyClientDrinkingRequests=true
}


ghost {
    # Setting this to true allows ghosts with enough energy to fly
    B:allowFlying=true

    # Setting this to false disables any ghost interaction with the world whatsoever
    B:enableInteraction=true

    # Set to true to enable ghosts
    B:enabled=false

    # The rate at which ghost energy is drained when flying
    # Normally, this should be a little more than the night regeneration rate.
    D:flyingDrain=0.075

    # The minimum amount of energy to enable flying.
    # Below this threshold, ghosts will be unable to start flying
    # Ghosts that are already flying will drop to the ground
    # Min: 0.0
    # Max: 100.0
    D:flyingThreshold=25.0

    # The base cost of all interactions.
    # Interaction processors use this as a base value to compute the interaction cost based on complexity of the interaction
    D:interactionCost=10.0

    # Setting this to true enables subclass-checking the blocks in addition to direct checking.
    # This option serves mainly for resolving compatibility issues, and may have negligible impact on performance
    B:interactionSubclassing=false

    # The minimum amount of ghost energy the ghost needs to have to be able to interact with the world
    # Min: 0.0
    # Max: 100.0
    D:interactionThreshold=40.0

    # The rate at which ghost energy replenishes during night
    D:passiveNightRegen=0.05

    # Setting this to true makes ghosts stay still while they're being resurrected
    B:resurrectionBlocksMovement=true

    # The time in ticks it takes for ghosts to resurrect
    # Min: 60
    # Max: 2147483647
    I:resurrectionDuration=200

    # The rate at which ghost energy is drained when sprinting/using boost
    D:sprintingEnergyDrain=0.1
}


heat {
    # A map of armor types and their heat conductivity.
    # This value is split between individual pieces using distributionVector
    S:armorMaterialConductivity <
        leather 0.3
        chain 1.1
        iron 1.2
        gold 1.5
        diamond 2.25
     >

    # A map of blocks and their core heat.
    # See the wiki for how this value is affecting the radiant heat
    S:blockHeatMap <
        minecraft:lava 400
        minecraft:flowing_lava 350
        minecraft:magma 300
        minecraft:fire 200
        minecraft:lit_furnace 100
        minecraft:lit_pumpkin 80
     >

    # The maximum distance radiant heat from blocks propagates through
    # Min: 0
    # Max: 2147483647
    D:blockScanRange=4.0

    # The depth below surface at which the ambient temperature is that set in "Cave Temperature"
    # Has no effect if "Gradient Cave Temperature" is disabled.
    # Min: 0
    # Max: 2147483647
    I:caveNormalizationDepth=10

    # The temperature at the cave normalization depth. If "Gradient Cave Temperature" is disabled, this temperature is uniform for every block below sea level.
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:caveTemperature=0.7

    # Setting this to true causes the "Daytime Difference" value to be subtracted during night.
    B:colderNights=false

    # The range along which the counteraction scales.
    # If the temperature gets x-ths of temperature range away from optimal, the amplitude remains constant (i.e. maxed out)
    # Min: 0.0
    # Max: 1.0
    D:counteractionCoverage=0.2

    # The exponent to the counteraction scaling function.
    # Needless to say, exponent 1 makes the function scale lineraly.
    # Likewise, exponents <1 make it scale like root functions.
    # Exponent 0 makes the amplitude always maxed out.
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:counteractionExponent=2.0

    # The damage applied if fireDuration is set to 0.
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:damageAmount=1.0

    # The difference between the base environment temperature and the one during daytime. (and nighttime conversely)
    D:daytimeDifference=10.0

    # States how different armor pieces contribute to the set's conductivity multiplier
    # For example, chestplate has higher surface area, so it should have bigger impact on the conductivity than the boots
    # The entered vector is normalized before being put to use
    # Min: 0.0
    # Max: 4.4942328371557893E307
    D:distributionVector <
        0.2
        0.35
        0.3
        0.15
     >

    # Set to true to enable body internal heat counteraction, a mechanism which regenerates or dissipates heat based on the distance from optimal temperature.
    B:enableCounteraction=true

    # Setting this to true enables heat mechanics
    B:enabled=true

    # The duration of fire applied when the player's heat exceeds the threshold
    # Setting this to 0 disables the fire, and opts for direct damage instead.
    # Min: 0
    # Max: 2147483647
    I:fireDuration=1

    # A gauss curve scaling number.
    # Higher values mean sharper curves.
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:gaussScaling=1.5

    # Set to true to enable the cave gradient temperatures.
    # Setting this to false may improve server performance.
    B:gradientCaveTemperature=true

    # The rate at which the player's heat moves towards the environment's temperature
    # Min: 0.0
    # Max: 1.0
    D:heatExchangeFactor=0.002

    # The maximum counteraction against too hot temperatures
    # In other words, how much the body can correct it's temperature when it's too hot
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:negativeCAAmplitude=0.01

    # The maximum counteraction against too cold temperatures
    # In other words, how much the body can correct it's temperature when it's too cold
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:positiveCAAmplitude=0.035

    # The environmental heat bonus received by standing in sunlight during daytime
    D:sunlightBonus=15.0

    # The radius around the surface block to calculate average surface height from.
    # Higher numbers have larger impact on server performance.
    # Has no effect if "Gradient Cave Temperature" is disabled.
    # Min: 1
    # Max: 2147483647
    I:surfaceScanningRadius=2

    # A coefficient to turn the biome's temperature to the one processed by Survival Inc.
    # 60 is normally a good choice; Schoperation used to use 78.0
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:tempCoefficient=60.0

    # The heat exchange rate multiplier applied when wetness is at it's maximum
    # This option is ignored when wetness is disabled
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:wetnessExchangeMultiplier=4.0
}


hydration {
    # The amount of water indicated by number of sips the canteen can store
    # Min: 1
    # Max: 2147483647
    I:canteenCapacity=32

    # Setting this to true enables hydration mechanics
    B:enabled=true

    # The rate in units/tick at which hydration is passively drained
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:passiveDrain=0.0010000000474974513

    # The amount of hydration replenished by single sip from canteen or water body
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:sipVolume=5.0

    # The initial value of hydration.
    # Min: 0.0
    # Max: 100.0
    D:startValue=80.0

    # The multiplier to the passive drain inflicted by sweating effect
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:sweatingMultiplier=4.0

    # The amount of heat after which the sweating effect is applied
    # Min: 0.0
    # Max: 1.0
    D:sweatingThreshold=0.75
}


sanity {
    # The sanity bonus received when the player tames an animal
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:animalTameBoost=20.0

    # The minimum light level without any sanity impact
    # Min: 0
    # Max: 15
    I:comfortLightLevel=4

    # The rate in units/tick at which being in light level of 0 drains your sanity
    # This value is linearly interpolated to the other light levels up to the comfortable light level
    # Min: 1.0E-4
    # Max: 0.1
    D:darkSpookFactorBase=0.05

    # Setting this to true enables sanity mechanics
    B:enabled=true

    # The rate at which sanity is replenished by standing near friendly mobs
    # Min: 0.001
    # Max: 1.7976931348623157E308
    D:friendlyMobBonus=0.006

    # A fraction of maximum sanity below which hallucinations start to appear
    # Min: 0.0
    # Max: 1.0
    D:hallucinationThreshold=0.4

    # The rate at which sanity is drained by standing near hostile mobs
    # Min: 0.001
    # Max: 1.7976931348623157E308
    D:hostileMobModifier=0.003

    # The maximum rate at which sanity is drained due to wetness
    # Min: 0.0
    # Max: 100.0
    D:maxWetnessAnnoyance=0.02

    # The rate at which sanity is passively drained during night
    # Min: 0.001
    # Max: 1.7976931348623157E308
    D:nighttimeDrain=0.0075

    # The rate at which sanity is drained after the player stays awake for <sleepDeprivationMax> ticks.
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:sleepDeprivationDebuff=0.04

    # The time (in ticks) at which sleep deprivation sanity drain rate reaches it's peak
    # Min: 2
    # Max: 2147483647
    I:sleepDeprivationMax=120000

    # The longest time (in ticks) the player can stay awake without suffering from sleep deprivation
    # Min: 1
    # Max: 2147483647
    I:sleepDeprivationMin=24000

    # The fraction of maximum sanity restored by sleeping
    # Min: 0.0
    # Max: 1.0
    D:sleepResoration=0.3

    # The starting value of sanity
    # Min: 0.0
    # Max: 100.0
    D:startValue=100.0

    # The intensity of the static buzzing
    # Min: 0.0
    # Max: 1.0
    D:staticBuzzIntensity=1.0

    # The multiplier to the friendlyMobBonus if the entity also happens to be tamed
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:tamedMobMultiplier=4.0

    # The fraction of wetness after which it starts to take a toll on sanity
    # Min: 0.0
    # Max: 1.0
    D:wetnessAnnoyanceThreshold=0.35
}


seasons {
    # The lengths of individual seasons.
    # ORDER: Winter, Spring, Summer, Autumn
    # Min: 1
    # Max: 2147483647
    I:durations <
        14
        14
        14
        14
     >

    # Setting this to true enables the sesons
    B:enabled=false

    # The melting controller that is responsible for melting and freezing the meltable blocks
    # See the wiki for what each MeltingController offers.
    # Valid values:
    # FANCY
    # LAZY
    # SIMPLE
    # NONE
    S:meltController=FANCY

    # The day in the target season the player starts in
    # Min: 0
    # Max: 2147483647
    I:startingDay=6

    # The season the player starts in
    S:startingSeason=survivalinc:spring

    # The temperatures of individual seasons.
    # ORDER: Winter, Spring, Summer, Autumn
    D:temperatures <
        -1.0
        0.10000000149011612
        0.5
        -0.10000000149011612
     >
}


wetness {
    # The fraction of the current wetness drained each tick
    # Please note that the value drained each tick is always a FRACTION of what the value was in previous tick. This makes a nice logarithmic draining cruve
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:drainingFactor=64.0

    # Setting this to true enables wetness
    B:enabled=true

    # The rate in units/tick at which wetness rises when fully submerged in water.
    # The clothing soak-up is meant to be instant, so it makes sense for this value to be arbitrarily high.
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:fullySubmergedRate=5.0

    # The minimal walking speed, generally caused by maximum value of wetness
    # Min: 0.0
    # Max: 1.0
    D:minimalWalkSpeed=0.25

    # The maximum fraction of wetness absorbed when partially submerged.
    # Setting this value to 0 disables partial submersion, while 1 disables full submersion.
    # Min: 0.0
    # Max: 1.0
    D:partiallySubmergedCap=0.4

    # The rate in units/tick at which wetness rises when partially submerged in water.
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:partiallySubmergedRate=1.25

    # The capacity of a towel expressed as a fraction of player's maximum wetness
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:towelCapacity=0.4

    # The rate in units/tick at which a towel dries on top of a furnace
    # Min: 0.0
    # Max: 1.7976931348623157E308
    D:towelDryRate=0.025
}


